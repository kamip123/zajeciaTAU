package pl.edu.pjatk.tau.dao;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import pl.edu.pjatk.tau.domain.Player;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import static org.junit.Assert.*;

import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.hamcrest.CoreMatchers.equalTo;

@RunWith(JUnit4.class)
public class PlayerDaoTest {
    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    PlayerDao playerDao;
    List<Player> initialDatabaseState;

    @Before
    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        initialDatabaseState = new ArrayList<>();
        try {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE IF NOT EXISTS " +
                            "Player(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            + "name varchar(50) NOT NULL, "
                            + "armor integer NOT NULL, "
                            + "hp integer NOT NULL)");
        }
        catch (SQLException e) {
            throw new IllegalStateException(e.getMessage());
        }

        PreparedStatement addPlayerPreparedStatement = connection.prepareStatement(
                "INSERT INTO Player (name, armor, hp) VALUES (?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        List<Player> players = new ArrayList<>();
        Collections.addAll(players,
                new Player("best player", 50, 10),
                new Player("wiedzmin", 20, 1000),
                new Player("harry", 200, 200));

        for (Player player : players) {
            try {
                addPlayerPreparedStatement.setString(1, player.getName());
                addPlayerPreparedStatement.setInt(2, player.getArmor());
                addPlayerPreparedStatement.setInt(3, player.getHp());
                addPlayerPreparedStatement.executeUpdate();
                ResultSet generatedKeys = addPlayerPreparedStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    player.setId(generatedKeys.getLong(1));
                }
                initialDatabaseState.add(player);
            }
            catch (SQLException e) {
                throw new IllegalStateException(e.getMessage());
            }
        }

        playerDao = new PlayerDaoJdbcImpl(connection);
    }

    @After
    public void cleanup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.prepareStatement("DELETE FROM Player").executeUpdate();
        }
        catch (SQLException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }

    @Test
    public void additionTest() {
        Player player = new Player();
        player.setName("Player 1");
        player.setArmor(2019);
        player.setHp(1000);
        assertEquals(1, playerDao.addPlayer(player));
        initialDatabaseState.add(player);
        assertThat(playerDao.getAllPlayers(), equalTo(initialDatabaseState));
    }

    @Test
    public void gettingAllTest() {
        List<Player> retrievedPlayers = playerDao.getAllPlayers();
        assertThat(retrievedPlayers, equalTo(initialDatabaseState));
    }
}